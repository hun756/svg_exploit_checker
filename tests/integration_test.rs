use svg_exploit_checker::svg_checker::{SvgChecker, SvgCheckError, Config};
use tempfile;

#[tokio::test]
async fn test_script_tag_detection() {
    let svg_content = r#"
    <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100">
        <script>alert('XSS');</script>
    </svg>"#;

    let temp_dir = tempfile::tempdir().unwrap();
    let file_path = temp_dir.path().join("test.svg");
    std::fs::write(&file_path, svg_content).unwrap();

    let config = Config::default();
    let checker = SvgChecker::new(config);
    let result = checker.check_file(file_path).await;

    assert!(matches!(result, Err(SvgCheckError::ExploitDetected(msg)) if msg.contains("Script tag found")));
}

#[tokio::test]
async fn test_safe_svg() {
    let svg_content = r#"
    <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100">
        <rect width="100" height="100" fill="blue" />
    </svg>"#;

    let temp_dir = tempfile::tempdir().unwrap();
    let file_path = temp_dir.path().join("safe.svg");
    std::fs::write(&file_path, svg_content).unwrap();

    let config = Config::default();
    let checker = SvgChecker::new(config);
    let result = checker.check_file(file_path).await;

    assert!(result.is_ok());
}

async fn run_test_for_tag(svg_content: &str) -> Result<(), SvgCheckError> {
    let temp_dir = tempfile::tempdir().unwrap();
    let file_path = temp_dir.path().join("test.svg");
    std::fs::write(&file_path, svg_content).unwrap();

    let config = Config {
        rules: vec!["ExternalResourceRule".to_string()],
    };
    let checker = SvgChecker::new(config);
    checker.check_file(file_path).await
}

#[tokio::test]
async fn test_image_tag_external_resource() {
    let svg_content = r#"
    <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100">
        <image href="https://example.com/image.png" />
    </svg>"#;

    let result = run_test_for_tag(svg_content).await;
    println!("Image tag test result: {:?}", result);
    assert!(matches!(result, Err(SvgCheckError::ExploitDetected(msg)) if msg.contains("External resource found in tag image")));
}

#[tokio::test]
async fn test_use_tag_external_resource() {
    let svg_content = r#"
    <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100">
        <use href="https://example.com/sprite.svg#icon" />
    </svg>"#;

    let result = run_test_for_tag(svg_content).await;
    println!("Use tag test result: {:?}", result);
    assert!(matches!(result, Err(SvgCheckError::ExploitDetected(msg)) if msg.contains("External resource found in tag use")));
}

#[tokio::test]
async fn test_script_tag_external_resource() {
    let svg_content = r#"
    <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100">
        <script href="https://example.com/script.js" />
    </svg>"#;

    let result = run_test_for_tag(svg_content).await;
    println!("Script tag test result: {:?}", result);
    assert!(matches!(result, Err(SvgCheckError::ExploitDetected(msg)) if msg.contains("External resource found in tag script")));
}

#[tokio::test]
async fn test_link_tag_external_resource() {
    let svg_content = r#"
    <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100">
        <link href="https://example.com/styles.css" rel="stylesheet" />
    </svg>"#;

    let result = run_test_for_tag(svg_content).await;
    println!("Link tag test result: {:?}", result);
    assert!(matches!(result, Err(SvgCheckError::ExploitDetected(msg)) if msg.contains("External resource found in tag link")));
}
