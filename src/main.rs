use clap::{Parser, Subcommand};
use svg_checker::{SvgChecker, SvgCheckError, Config};
use std::path::PathBuf;
use anyhow::Result;
use colored::*;

mod svg_checker;
mod rules;

#[derive(Parser)]
#[command(author, version, about, long_about = None)]
struct Cli {
    #[command(subcommand)]
    command: Option<Commands>,

    #[arg(short, long, value_name = "FILE")]
    config: Option<PathBuf>,
}

#[derive(Subcommand)]
enum Commands {
    Check {
        #[arg(value_name = "FILE")]
        file: PathBuf,
    },
}

#[tokio::main]
async fn main() -> Result<()> {
    let cli = Cli::parse();

    let config = match cli.config {
        Some(path) => Config::from_file(&path)?,
        None => Config::default(),
    };

    let checker = SvgChecker::new(config);

    match &cli.command {
        Some(Commands::Check { file }) => {
            println!("Checking file: {}", file.display());
            match checker.check_file(file).await {
                Ok(_) => println!("{}", "No exploits detected.".green()),
                Err(SvgCheckError::ExploitDetected(msg)) => println!("{} {}", "Exploit detected:".red().bold(), msg),
                Err(e) => println!("{} {}", "Error:".red().bold(), e),
            }
        }
        None => {
            println!("No command specified. Use --help for usage information.");
        }
    }

    Ok(())
}
