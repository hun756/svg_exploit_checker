use async_trait::async_trait;
use quick_xml::Reader;
use crate::svg_checker::SvgCheckError;
use super::ExploitRule;

pub struct Base64EmbeddingRule;

impl Base64EmbeddingRule {
    pub fn new() -> Self {
        Base64EmbeddingRule
    }
}

#[async_trait]
impl ExploitRule for Base64EmbeddingRule {
    async fn check_event(&self, e: &quick_xml::events::BytesStart<'_>, _reader: &Reader<&[u8]>) -> Result<(), SvgCheckError> {
        for attr in e.attributes().filter_map(|a| a.ok()) {
            let value = std::str::from_utf8(&attr.value).unwrap_or("");
            if value.contains("base64,") {
                let local_name = attr.key.local_name();
                let attr_key = local_name.as_ref();
                let attr_key_str = std::str::from_utf8(attr_key).unwrap_or("");
                return Err(SvgCheckError::ExploitDetected(format!("Base64 encoded data found in attribute: {}", attr_key_str)));
            }
        }
        Ok(())
    }
}
