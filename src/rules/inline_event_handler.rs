use super::ExploitRule;
use crate::svg_checker::SvgCheckError;
use async_trait::async_trait;
use quick_xml::Reader;

pub struct InlineEventHandlerRule;

impl InlineEventHandlerRule {
    pub fn new() -> Self {
        InlineEventHandlerRule
    }
}

#[async_trait]
impl ExploitRule for InlineEventHandlerRule {
    async fn check_event(
        &self,
        e: &quick_xml::events::BytesStart<'_>,
        _reader: &Reader<&[u8]>,
    ) -> Result<(), SvgCheckError> {
        let js_event_attributes = [
            // Mouse Events
            "onclick",
            "ondblclick",
            "onmousedown",
            "onmouseup",
            "onmouseover",
            "onmousemove",
            "onmouseout",
            "onmouseenter",
            "onmouseleave",
            // Keyboard Events
            "onkeydown",
            "onkeypress",
            "onkeyup",
            // Form Events
            "onsubmit",
            "onchange",
            "onfocus",
            "onblur",
            "oninput",
            "oninvalid",
            "onreset",
            "onselect",
            // Drag Events
            "ondrag",
            "ondragend",
            "ondragenter",
            "ondragleave",
            "ondragover",
            "ondragstart",
            "ondrop",
            // Clipboard Events
            "oncopy",
            "oncut",
            "onpaste",
            // Print Events
            "onafterprint",
            "onbeforeprint",
            // View Events
            "onresize",
            "onscroll",
            // Media Events
            "oncanplay",
            "oncanplaythrough",
            "ondurationchange",
            "onemptied",
            "onended",
            "onerror",
            "onloadeddata",
            "onloadedmetadata",
            "onloadstart",
            "onpause",
            "onplay",
            "onplaying",
            "onprogress",
            "onratechange",
            "onseeked",
            "onseeking",
            "onstalled",
            "onsuspend",
            "ontimeupdate",
            "onvolumechange",
            "onwaiting",
            // Animation Events
            "animationstart",
            "animationend",
            "animationiteration",
            // Transition Events
            "transitionend",
            // SVG-specific Events
            "onload",
            "onunload",
            "onabort",
            "onerror",
            "onresize",
            "onscroll",
            "onzoom",
            "onbegin",
            "onend",
            "onrepeat",
            // Pointer Events
            "onpointerdown",
            "onpointermove",
            "onpointerup",
            "onpointercancel",
            "onpointerover",
            "onpointerout",
            "onpointerenter",
            "onpointerleave",
            // Touch Events
            "ontouchstart",
            "ontouchmove",
            "ontouchend",
            "ontouchcancel",
            // Misc Events
            "onshow",
            "ontoggle",
        ];

        for attr in e.attributes().filter_map(|a| a.ok()) {
            let local_name = attr.key.local_name();
            let attr_key = local_name.as_ref();
            let attr_key_str = std::str::from_utf8(attr_key).unwrap_or("");
            if js_event_attributes.contains(&attr_key_str) {
                let value = std::str::from_utf8(&attr.value).unwrap_or("");
                return Err(SvgCheckError::ExploitDetected(format!(
                    "Inline event handler found: {}={}",
                    attr_key_str, value
                )));
            }
        }
        Ok(())
    }
}
