use async_trait::async_trait;
use quick_xml::Reader;
use std::collections::HashSet;
use std::sync::Mutex;
use crate::svg_checker::SvgCheckError;
use super::ExploitRule;

pub struct IdReuseRule {
    ids_encountered: Mutex<HashSet<String>>,
}

impl IdReuseRule {
    pub fn new() -> Self {
        IdReuseRule {
            ids_encountered: Mutex::new(HashSet::new()),
        }
    }
}

#[async_trait]
impl ExploitRule for IdReuseRule {
    async fn check_event(&self, e: &quick_xml::events::BytesStart<'_>, _reader: &Reader<&[u8]>) -> Result<(), SvgCheckError> {
        for attr in e.attributes().filter_map(|a| a.ok()) {
            let key = attr.key.local_name();
            if key.as_ref() == b"id" {
                let id_value = std::str::from_utf8(&attr.value).unwrap_or("").to_string();
                let mut ids = self.ids_encountered.lock().unwrap();
                if ids.contains(&id_value) {
                    return Err(SvgCheckError::ExploitDetected(format!("Duplicate ID found: {}", id_value)));
                } else {
                    ids.insert(id_value);
                }
            }
        }
        Ok(())
    }
}
