// src/rules/css_injection.rs
use super::ExploitRule;
use crate::svg_checker::SvgCheckError;
use async_trait::async_trait;
use quick_xml::events::Event;
use quick_xml::name::QName;
use quick_xml::Reader;

pub struct CssInjectionRule;

impl CssInjectionRule {
    pub fn new() -> Self {
        CssInjectionRule
    }
}

#[async_trait]
impl ExploitRule for CssInjectionRule {
    async fn check_event(
        &self,
        e: &quick_xml::events::BytesStart<'_>,
        reader: &Reader<&[u8]>,
    ) -> Result<(), SvgCheckError> {
        for attr in e.attributes().filter_map(|a| a.ok()) {
            let local_name = attr.key.local_name();
            let attr_key = local_name.as_ref();
            let attr_key_str = std::str::from_utf8(attr_key).unwrap_or("");
            if attr_key_str == "style" {
                let value = std::str::from_utf8(&attr.value).unwrap_or("");
                if value.contains("url(") {
                    return Err(SvgCheckError::ExploitDetected(format!(
                        "Potential CSS injection found in style attribute: {}",
                        value
                    )));
                }
            }
        }

        if e.name() == QName(b"style") {
            let mut reader = reader.clone();
            let mut depth = 0;
            loop {
                match reader.read_event() {
                    Ok(Event::Start(_)) => depth += 1,
                    Ok(Event::End(_)) => {
                        if depth == 0 {
                            break;
                        }
                        depth -= 1;
                    }
                    Ok(Event::Text(text)) => {
                        let content = text.unescape().unwrap_or_default();
                        if content.contains("url(") {
                            return Err(SvgCheckError::ExploitDetected(format!(
                                "Potential CSS injection found in <style> tag: {}",
                                content
                            )));
                        }
                    }
                    Ok(Event::Eof) => break,
                    Err(e) => return Err(SvgCheckError::ParseError(e)),
                    _ => (),
                }
            }
        }

        Ok(())
    }
}
